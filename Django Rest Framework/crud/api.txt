from django.http import JsonResponse
from .models import Student
from .serializers import StudentSerializer
from django.views.decorators.csrf import csrf_exempt
import json
from rest_framework.decorators import api_view
@csrf_exempt
@api_view(['GET','POST','PUT','DELETE'])
def studentApi(request,id=None):
    if request.method == 'GET':
        if id is not None:
            try:
                stu = Student.objects.get(id=id)
                serializer = StudentSerializer(stu)
                return JsonResponse(serializer.data, safe=False)
            except Student.DoesNotExist:
                return JsonResponse({'error': 'Student not found'}, status=404)
        else:
            stu = Student.objects.all()
            serializer = StudentSerializer(stu, many=True)
            return JsonResponse(serializer.data, safe=False)
    
    if request.method=='POST':
        data = json.loads(request.body)
        serializer = StudentSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return JsonResponse({'msg':'Data Created'},status=201)
        return JsonResponse(serializer.errors, status=400)

    if request.method == 'PUT':
        if id is not None:
            try:
                stu = Student.objects.get(id=id)
                data = json.loads(request.body)
                serializer = StudentSerializer(stu, data=data, partial=True)
                if serializer.is_valid():
                    serializer.save()
                    return JsonResponse({'msg': 'Data Updated'}, status=200)
                return JsonResponse(serializer.errors, status=400)
            except Student.DoesNotExist:
                return JsonResponse({'error': 'Student not found'}, status=404)
        return JsonResponse({'error': 'ID is required for updating data'}, status=400)
    

    if request.method == 'DELETE':
        if id is not None:
            try:
                stu = Student.objects.get(id=id)
                stu.delete()
                return JsonResponse({'msg': 'Data Deleted'}, status=200)
            except Student.DoesNotExist:
                return JsonResponse({'error': 'Student not found'}, status=404)
        return JsonResponse({'error': 'ID is required for deleting data'}, status=400)
    
    return JsonResponse({'error': 'Invalid HTTP method'}, status=405)
